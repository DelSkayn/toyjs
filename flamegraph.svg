<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="790" onload="init(evt)" viewBox="0 0 1200 790" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="790" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="773.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="773.00"> </text><svg id="frames" x="10" width="1180" total_samples="4654"><g><title>[[stack]] (1 samples, 0.02%)</title><rect x="0.0000%" y="709" width="0.0215%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="719.50"></text></g><g><title>__free (1 samples, 0.02%)</title><rect x="0.0000%" y="693" width="0.0215%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.0000%" y="677" width="0.0215%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.0215%" y="709" width="0.0215%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="1"/><text x="0.2715%" y="719.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="0.0215%" y="693" width="0.0215%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="1"/><text x="0.2715%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="0.0215%" y="677" width="0.0215%" height="15" fill="rgb(232,128,0)" fg:x="1" fg:w="1"/><text x="0.2715%" y="687.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.02%)</title><rect x="0.0215%" y="661" width="0.0215%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="1"/><text x="0.2715%" y="671.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.02%)</title><rect x="0.0215%" y="645" width="0.0215%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="1"/><text x="0.2715%" y="655.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.02%)</title><rect x="0.0215%" y="629" width="0.0215%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="1"/><text x="0.2715%" y="639.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.02%)</title><rect x="0.0215%" y="613" width="0.0215%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="1"/><text x="0.2715%" y="623.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.02%)</title><rect x="0.0215%" y="597" width="0.0215%" height="15" fill="rgb(250,228,42)" fg:x="1" fg:w="1"/><text x="0.2715%" y="607.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.02%)</title><rect x="0.0215%" y="581" width="0.0215%" height="15" fill="rgb(240,193,28)" fg:x="1" fg:w="1"/><text x="0.2715%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.0215%" y="565" width="0.0215%" height="15" fill="rgb(216,20,37)" fg:x="1" fg:w="1"/><text x="0.2715%" y="575.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="0.0645%" y="693" width="0.0430%" height="15" fill="rgb(206,188,39)" fg:x="3" fg:w="2"/><text x="0.3145%" y="703.50"></text></g><g><title>std::io::stdio::_print (1 samples, 0.02%)</title><rect x="0.1074%" y="437" width="0.0215%" height="15" fill="rgb(217,207,13)" fg:x="5" fg:w="1"/><text x="0.3574%" y="447.50"></text></g><g><title>std::io::stdio::print_to (1 samples, 0.02%)</title><rect x="0.1074%" y="421" width="0.0215%" height="15" fill="rgb(231,73,38)" fg:x="5" fg:w="1"/><text x="0.3574%" y="431.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (1 samples, 0.02%)</title><rect x="0.1074%" y="405" width="0.0215%" height="15" fill="rgb(225,20,46)" fg:x="5" fg:w="1"/><text x="0.3574%" y="415.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (1 samples, 0.02%)</title><rect x="0.1074%" y="389" width="0.0215%" height="15" fill="rgb(210,31,41)" fg:x="5" fg:w="1"/><text x="0.3574%" y="399.50"></text></g><g><title>std::io::stdio::Stdout::lock (1 samples, 0.02%)</title><rect x="0.1074%" y="373" width="0.0215%" height="15" fill="rgb(221,200,47)" fg:x="5" fg:w="1"/><text x="0.3574%" y="383.50"></text></g><g><title>std::io::stdio::Stdout::lock_any (1 samples, 0.02%)</title><rect x="0.1074%" y="357" width="0.0215%" height="15" fill="rgb(226,26,5)" fg:x="5" fg:w="1"/><text x="0.3574%" y="367.50"></text></g><g><title>std::sys_common::remutex::ReentrantMutex&lt;T&gt;::lock (1 samples, 0.02%)</title><rect x="0.1074%" y="341" width="0.0215%" height="15" fill="rgb(249,33,26)" fg:x="5" fg:w="1"/><text x="0.3574%" y="351.50"></text></g><g><title>std::sys::unix::mutex::ReentrantMutex::lock (1 samples, 0.02%)</title><rect x="0.1074%" y="325" width="0.0215%" height="15" fill="rgb(235,183,28)" fg:x="5" fg:w="1"/><text x="0.3574%" y="335.50"></text></g><g><title>___pthread_mutex_lock (1 samples, 0.02%)</title><rect x="0.1074%" y="309" width="0.0215%" height="15" fill="rgb(221,5,38)" fg:x="5" fg:w="1"/><text x="0.3574%" y="319.50"></text></g><g><title>toyjs_compiler::Compiler&lt;A&gt;::compile_script (1 samples, 0.02%)</title><rect x="0.1289%" y="437" width="0.0215%" height="15" fill="rgb(247,18,42)" fg:x="6" fg:w="1"/><text x="0.3789%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::last (1 samples, 0.02%)</title><rect x="0.1289%" y="421" width="0.0215%" height="15" fill="rgb(241,131,45)" fg:x="6" fg:w="1"/><text x="0.3789%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.02%)</title><rect x="0.1289%" y="405" width="0.0215%" height="15" fill="rgb(249,31,29)" fg:x="6" fg:w="1"/><text x="0.3789%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.02%)</title><rect x="0.1289%" y="389" width="0.0215%" height="15" fill="rgb(225,111,53)" fg:x="6" fg:w="1"/><text x="0.3789%" y="399.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (1 samples, 0.02%)</title><rect x="0.1289%" y="373" width="0.0215%" height="15" fill="rgb(238,160,17)" fg:x="6" fg:w="1"/><text x="0.3789%" y="383.50"></text></g><g><title>toyjs_compiler::Compiler&lt;A&gt;::compile_script::{{closure}} (1 samples, 0.02%)</title><rect x="0.1289%" y="357" width="0.0215%" height="15" fill="rgb(214,148,48)" fg:x="6" fg:w="1"/><text x="0.3789%" y="367.50"></text></g><g><title>toyjs_compiler::stmt::&lt;impl toyjs_compiler::Compiler&lt;A&gt;&gt;::compile_stmt (1 samples, 0.02%)</title><rect x="0.1289%" y="341" width="0.0215%" height="15" fill="rgb(232,36,49)" fg:x="6" fg:w="1"/><text x="0.3789%" y="351.50"></text></g><g><title>toyjs_compiler::expr::&lt;impl toyjs_compiler::Compiler&lt;A&gt;&gt;::compile_expressions (1 samples, 0.02%)</title><rect x="0.1289%" y="325" width="0.0215%" height="15" fill="rgb(209,103,24)" fg:x="6" fg:w="1"/><text x="0.3789%" y="335.50"></text></g><g><title>toyjs_compiler::expr::&lt;impl toyjs_compiler::Compiler&lt;A&gt;&gt;::compile_expr (1 samples, 0.02%)</title><rect x="0.1289%" y="309" width="0.0215%" height="15" fill="rgb(229,88,8)" fg:x="6" fg:w="1"/><text x="0.3789%" y="319.50"></text></g><g><title>toyjs_compiler::expr::&lt;impl toyjs_compiler::Compiler&lt;A&gt;&gt;::compile_function_call (1 samples, 0.02%)</title><rect x="0.1289%" y="293" width="0.0215%" height="15" fill="rgb(213,181,19)" fg:x="6" fg:w="1"/><text x="0.3789%" y="303.50"></text></g><g><title>toyjs_compiler::expr::&lt;impl toyjs_compiler::Compiler&lt;A&gt;&gt;::compile_expr (1 samples, 0.02%)</title><rect x="0.1289%" y="277" width="0.0215%" height="15" fill="rgb(254,191,54)" fg:x="6" fg:w="1"/><text x="0.3789%" y="287.50"></text></g><g><title>toyjs_parser::Parser&lt;A&gt;::parse_script (1 samples, 0.02%)</title><rect x="0.1504%" y="437" width="0.0215%" height="15" fill="rgb(241,83,37)" fg:x="7" fg:w="1"/><text x="0.4004%" y="447.50"></text></g><g><title>toyjs_parser::Parser&lt;A&gt;::do_parse_script (1 samples, 0.02%)</title><rect x="0.1504%" y="421" width="0.0215%" height="15" fill="rgb(233,36,39)" fg:x="7" fg:w="1"/><text x="0.4004%" y="431.50"></text></g><g><title>toyjs_parser::stmt::&lt;impl toyjs_parser::Parser&lt;A&gt;&gt;::parse_stmt (1 samples, 0.02%)</title><rect x="0.1504%" y="405" width="0.0215%" height="15" fill="rgb(226,3,54)" fg:x="7" fg:w="1"/><text x="0.4004%" y="415.50"></text></g><g><title>toyjs_parser::stmt::&lt;impl toyjs_parser::Parser&lt;A&gt;&gt;::parse_function (1 samples, 0.02%)</title><rect x="0.1504%" y="389" width="0.0215%" height="15" fill="rgb(245,192,40)" fg:x="7" fg:w="1"/><text x="0.4004%" y="399.50"></text></g><g><title>toyjs_parser::Parser&lt;A&gt;::peek_kind (1 samples, 0.02%)</title><rect x="0.1504%" y="373" width="0.0215%" height="15" fill="rgb(238,167,29)" fg:x="7" fg:w="1"/><text x="0.4004%" y="383.50"></text></g><g><title>toyjs_parser::Parser&lt;A&gt;::peek (1 samples, 0.02%)</title><rect x="0.1504%" y="357" width="0.0215%" height="15" fill="rgb(232,182,51)" fg:x="7" fg:w="1"/><text x="0.4004%" y="367.50"></text></g><g><title>toyjs_lexer::Lexer::next (1 samples, 0.02%)</title><rect x="0.1504%" y="341" width="0.0215%" height="15" fill="rgb(231,60,39)" fg:x="7" fg:w="1"/><text x="0.4004%" y="351.50"></text></g><g><title>toyjs_lexer::Lexer::next_inner (1 samples, 0.02%)</title><rect x="0.1504%" y="325" width="0.0215%" height="15" fill="rgb(208,69,12)" fg:x="7" fg:w="1"/><text x="0.4004%" y="335.50"></text></g><g><title>toyjs_lexer::Lexer::next_inner (1 samples, 0.02%)</title><rect x="0.1504%" y="309" width="0.0215%" height="15" fill="rgb(235,93,37)" fg:x="7" fg:w="1"/><text x="0.4004%" y="319.50"></text></g><g><title>toyjs_lexer::Lexer::lex_ident (1 samples, 0.02%)</title><rect x="0.1504%" y="293" width="0.0215%" height="15" fill="rgb(213,116,39)" fg:x="7" fg:w="1"/><text x="0.4004%" y="303.50"></text></g><g><title>toyjs_common::interner::Interner::intern (1 samples, 0.02%)</title><rect x="0.1504%" y="277" width="0.0215%" height="15" fill="rgb(222,207,29)" fg:x="7" fg:w="1"/><text x="0.4004%" y="287.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (1 samples, 0.02%)</title><rect x="0.1504%" y="261" width="0.0215%" height="15" fill="rgb(206,96,30)" fg:x="7" fg:w="1"/><text x="0.4004%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.02%)</title><rect x="0.1504%" y="245" width="0.0215%" height="15" fill="rgb(218,138,4)" fg:x="7" fg:w="1"/><text x="0.4004%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.02%)</title><rect x="0.1504%" y="229" width="0.0215%" height="15" fill="rgb(250,191,14)" fg:x="7" fg:w="1"/><text x="0.4004%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (1 samples, 0.02%)</title><rect x="0.1504%" y="213" width="0.0215%" height="15" fill="rgb(239,60,40)" fg:x="7" fg:w="1"/><text x="0.4004%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.02%)</title><rect x="0.1504%" y="197" width="0.0215%" height="15" fill="rgb(206,27,48)" fg:x="7" fg:w="1"/><text x="0.4004%" y="207.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (1 samples, 0.02%)</title><rect x="0.1504%" y="181" width="0.0215%" height="15" fill="rgb(225,35,8)" fg:x="7" fg:w="1"/><text x="0.4004%" y="191.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (1 samples, 0.02%)</title><rect x="0.1504%" y="165" width="0.0215%" height="15" fill="rgb(250,213,24)" fg:x="7" fg:w="1"/><text x="0.4004%" y="175.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (1 samples, 0.02%)</title><rect x="0.1504%" y="149" width="0.0215%" height="15" fill="rgb(247,123,22)" fg:x="7" fg:w="1"/><text x="0.4004%" y="159.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (1 samples, 0.02%)</title><rect x="0.1504%" y="133" width="0.0215%" height="15" fill="rgb(231,138,38)" fg:x="7" fg:w="1"/><text x="0.4004%" y="143.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::new_uninitialized (1 samples, 0.02%)</title><rect x="0.1504%" y="117" width="0.0215%" height="15" fill="rgb(231,145,46)" fg:x="7" fg:w="1"/><text x="0.4004%" y="127.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (1 samples, 0.02%)</title><rect x="0.1504%" y="101" width="0.0215%" height="15" fill="rgb(251,118,11)" fg:x="7" fg:w="1"/><text x="0.4004%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.02%)</title><rect x="0.1504%" y="85" width="0.0215%" height="15" fill="rgb(217,147,25)" fg:x="7" fg:w="1"/><text x="0.4004%" y="95.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.02%)</title><rect x="0.1504%" y="69" width="0.0215%" height="15" fill="rgb(247,81,37)" fg:x="7" fg:w="1"/><text x="0.4004%" y="79.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.02%)</title><rect x="0.1504%" y="53" width="0.0215%" height="15" fill="rgb(209,12,38)" fg:x="7" fg:w="1"/><text x="0.4004%" y="63.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.02%)</title><rect x="0.1504%" y="37" width="0.0215%" height="15" fill="rgb(227,1,9)" fg:x="7" fg:w="1"/><text x="0.4004%" y="47.50"></text></g><g><title>&lt;toyjs_vm::gc::ptr::Gc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.06%)</title><rect x="23.9794%" y="421" width="0.0645%" height="15" fill="rgb(248,47,43)" fg:x="1116" fg:w="3"/><text x="24.2294%" y="431.50"></text></g><g><title>toyjs_vm::realm::exec::&lt;impl toyjs_vm::realm::Realm&gt;::execute (3 samples, 0.06%)</title><rect x="23.9794%" y="405" width="0.0645%" height="15" fill="rgb(221,10,30)" fg:x="1116" fg:w="3"/><text x="24.2294%" y="415.50"></text></g><g><title>&lt;toyjs_vm::value::nan_tagged::Value as core::convert::From&lt;toyjs_vm::gc::ptr::Gc&lt;toyjs_vm::object::Object&gt;&gt;&gt;::from (127 samples, 2.73%)</title><rect x="24.0438%" y="421" width="2.7288%" height="15" fill="rgb(210,229,1)" fg:x="1119" fg:w="127"/><text x="24.2938%" y="431.50">&lt;t..</text></g><g><title>__GI___libc_malloc (281 samples, 6.04%)</title><rect x="35.0451%" y="325" width="6.0378%" height="15" fill="rgb(222,148,37)" fg:x="1631" fg:w="281"/><text x="35.2951%" y="335.50">__GI___l..</text></g><g><title>_int_malloc (222 samples, 4.77%)</title><rect x="36.3128%" y="309" width="4.7701%" height="15" fill="rgb(234,67,33)" fg:x="1690" fg:w="222"/><text x="36.5628%" y="319.50">_int_m..</text></g><g><title>__rdl_alloc (12 samples, 0.26%)</title><rect x="41.0829%" y="325" width="0.2578%" height="15" fill="rgb(247,98,35)" fg:x="1912" fg:w="12"/><text x="41.3329%" y="335.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (459 samples, 9.86%)</title><rect x="31.6287%" y="405" width="9.8625%" height="15" fill="rgb(247,138,52)" fg:x="1472" fg:w="459"/><text x="31.8787%" y="415.50">alloc::boxed::..</text></g><g><title>alloc::alloc::exchange_malloc (308 samples, 6.62%)</title><rect x="34.8732%" y="389" width="6.6180%" height="15" fill="rgb(213,79,30)" fg:x="1623" fg:w="308"/><text x="35.1232%" y="399.50">alloc::al..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (308 samples, 6.62%)</title><rect x="34.8732%" y="373" width="6.6180%" height="15" fill="rgb(246,177,23)" fg:x="1623" fg:w="308"/><text x="35.1232%" y="383.50">&lt;alloc::a..</text></g><g><title>alloc::alloc::Global::alloc_impl (308 samples, 6.62%)</title><rect x="34.8732%" y="357" width="6.6180%" height="15" fill="rgb(230,62,27)" fg:x="1623" fg:w="308"/><text x="35.1232%" y="367.50">alloc::al..</text></g><g><title>alloc::alloc::alloc (301 samples, 6.47%)</title><rect x="35.0236%" y="341" width="6.4676%" height="15" fill="rgb(216,154,8)" fg:x="1630" fg:w="301"/><text x="35.2736%" y="351.50">alloc::a..</text></g><g><title>__rust_alloc (7 samples, 0.15%)</title><rect x="41.3408%" y="325" width="0.1504%" height="15" fill="rgb(244,35,45)" fg:x="1924" fg:w="7"/><text x="41.5908%" y="335.50"></text></g><g><title>toyjs_vm::gc::GcArena::allocate (686 samples, 14.74%)</title><rect x="26.7727%" y="421" width="14.7400%" height="15" fill="rgb(251,115,12)" fg:x="1246" fg:w="686"/><text x="27.0227%" y="431.50">toyjs_vm::gc::GcArena:..</text></g><g><title>core::cell::Cell&lt;T&gt;::set (1 samples, 0.02%)</title><rect x="41.4912%" y="405" width="0.0215%" height="15" fill="rgb(240,54,50)" fg:x="1931" fg:w="1"/><text x="41.7412%" y="415.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (1 samples, 0.02%)</title><rect x="41.4912%" y="389" width="0.0215%" height="15" fill="rgb(233,84,52)" fg:x="1931" fg:w="1"/><text x="41.7412%" y="399.50"></text></g><g><title>core::mem::replace (1 samples, 0.02%)</title><rect x="41.4912%" y="373" width="0.0215%" height="15" fill="rgb(207,117,47)" fg:x="1931" fg:w="1"/><text x="41.7412%" y="383.50"></text></g><g><title>core::ptr::write (1 samples, 0.02%)</title><rect x="41.4912%" y="357" width="0.0215%" height="15" fill="rgb(249,43,39)" fg:x="1931" fg:w="1"/><text x="41.7412%" y="367.50"></text></g><g><title>&lt;toyjs_vm::realm::reader::InstructionReader as toyjs_vm::gc::trace::Trace&gt;::trace (1 samples, 0.02%)</title><rect x="45.8745%" y="341" width="0.0215%" height="15" fill="rgb(209,38,44)" fg:x="2135" fg:w="1"/><text x="46.1245%" y="351.50"></text></g><g><title>toyjs_vm::gc::Ctx::mark (1 samples, 0.02%)</title><rect x="45.8745%" y="325" width="0.0215%" height="15" fill="rgb(236,212,23)" fg:x="2135" fg:w="1"/><text x="46.1245%" y="335.50"></text></g><g><title>toyjs_common::cell_vec::CellVec&lt;T,A&gt;::push (1 samples, 0.02%)</title><rect x="45.8745%" y="309" width="0.0215%" height="15" fill="rgb(242,79,21)" fg:x="2135" fg:w="1"/><text x="46.1245%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.02%)</title><rect x="45.8745%" y="293" width="0.0215%" height="15" fill="rgb(211,96,35)" fg:x="2135" fg:w="1"/><text x="46.1245%" y="303.50"></text></g><g><title>core::ptr::write (1 samples, 0.02%)</title><rect x="45.8745%" y="277" width="0.0215%" height="15" fill="rgb(253,215,40)" fg:x="2135" fg:w="1"/><text x="46.1245%" y="287.50"></text></g><g><title>&lt;(A,B) as toyjs_vm::gc::trace::Trace&gt;::trace (2 samples, 0.04%)</title><rect x="45.8745%" y="405" width="0.0430%" height="15" fill="rgb(211,81,21)" fg:x="2135" fg:w="2"/><text x="46.1245%" y="415.50"></text></g><g><title>&lt;&amp;T as toyjs_vm::gc::trace::Trace&gt;::trace (2 samples, 0.04%)</title><rect x="45.8745%" y="389" width="0.0430%" height="15" fill="rgb(208,190,38)" fg:x="2135" fg:w="2"/><text x="46.1245%" y="399.50"></text></g><g><title>&lt;toyjs_vm::realm::Realm as toyjs_vm::gc::trace::Trace&gt;::trace (2 samples, 0.04%)</title><rect x="45.8745%" y="373" width="0.0430%" height="15" fill="rgb(235,213,38)" fg:x="2135" fg:w="2"/><text x="46.1245%" y="383.50"></text></g><g><title>&lt;toyjs_vm::realm::stack::Stack as toyjs_vm::gc::trace::Trace&gt;::trace (2 samples, 0.04%)</title><rect x="45.8745%" y="357" width="0.0430%" height="15" fill="rgb(237,122,38)" fg:x="2135" fg:w="2"/><text x="46.1245%" y="367.50"></text></g><g><title>&lt;toyjs_vm::value::nan_tagged::Value as toyjs_vm::gc::trace::Trace&gt;::trace (1 samples, 0.02%)</title><rect x="45.8960%" y="341" width="0.0215%" height="15" fill="rgb(244,218,35)" fg:x="2136" fg:w="1"/><text x="46.1460%" y="351.50"></text></g><g><title>toyjs_vm::gc::Ctx::mark (1 samples, 0.02%)</title><rect x="45.8960%" y="325" width="0.0215%" height="15" fill="rgb(240,68,47)" fg:x="2136" fg:w="1"/><text x="46.1460%" y="335.50"></text></g><g><title>toyjs_common::cell_vec::CellVec&lt;T,A&gt;::push (1 samples, 0.02%)</title><rect x="45.8960%" y="309" width="0.0215%" height="15" fill="rgb(210,16,53)" fg:x="2136" fg:w="1"/><text x="46.1460%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.02%)</title><rect x="45.8960%" y="293" width="0.0215%" height="15" fill="rgb(235,124,12)" fg:x="2136" fg:w="1"/><text x="46.1460%" y="303.50"></text></g><g><title>&lt;toyjs_vm::instructions::ByteCode as toyjs_vm::gc::trace::Trace&gt;::trace (1 samples, 0.02%)</title><rect x="45.9175%" y="405" width="0.0215%" height="15" fill="rgb(224,169,11)" fg:x="2137" fg:w="1"/><text x="46.1675%" y="415.50"></text></g><g><title>&lt;toyjs_vm::object::Object as toyjs_vm::gc::trace::Trace&gt;::trace (1 samples, 0.02%)</title><rect x="45.9390%" y="405" width="0.0215%" height="15" fill="rgb(250,166,2)" fg:x="2138" fg:w="1"/><text x="46.1890%" y="415.50"></text></g><g><title>&lt;toyjs_vm::value::nan_tagged::Value as toyjs_vm::gc::trace::Trace&gt;::trace (1 samples, 0.02%)</title><rect x="45.9390%" y="389" width="0.0215%" height="15" fill="rgb(242,216,29)" fg:x="2138" fg:w="1"/><text x="46.1890%" y="399.50"></text></g><g><title>toyjs_vm::gc::Ctx::mark (1 samples, 0.02%)</title><rect x="45.9390%" y="373" width="0.0215%" height="15" fill="rgb(230,116,27)" fg:x="2138" fg:w="1"/><text x="46.1890%" y="383.50"></text></g><g><title>toyjs_common::cell_vec::CellVec&lt;T,A&gt;::push (1 samples, 0.02%)</title><rect x="45.9390%" y="357" width="0.0215%" height="15" fill="rgb(228,99,48)" fg:x="2138" fg:w="1"/><text x="46.1890%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.02%)</title><rect x="45.9390%" y="341" width="0.0215%" height="15" fill="rgb(253,11,6)" fg:x="2138" fg:w="1"/><text x="46.1890%" y="351.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (3 samples, 0.06%)</title><rect x="45.9605%" y="405" width="0.0645%" height="15" fill="rgb(247,143,39)" fg:x="2139" fg:w="3"/><text x="46.2105%" y="415.50"></text></g><g><title>core::mem::replace (3 samples, 0.06%)</title><rect x="45.9605%" y="389" width="0.0645%" height="15" fill="rgb(236,97,10)" fg:x="2139" fg:w="3"/><text x="46.2105%" y="399.50"></text></g><g><title>core::ptr::write (3 samples, 0.06%)</title><rect x="45.9605%" y="373" width="0.0645%" height="15" fill="rgb(233,208,19)" fg:x="2139" fg:w="3"/><text x="46.2105%" y="383.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (38 samples, 0.82%)</title><rect x="46.0249%" y="405" width="0.8165%" height="15" fill="rgb(216,164,2)" fg:x="2142" fg:w="38"/><text x="46.2749%" y="415.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (38 samples, 0.82%)</title><rect x="46.0249%" y="389" width="0.8165%" height="15" fill="rgb(220,129,5)" fg:x="2142" fg:w="38"/><text x="46.2749%" y="399.50"></text></g><g><title>core::mem::replace (38 samples, 0.82%)</title><rect x="46.0249%" y="373" width="0.8165%" height="15" fill="rgb(242,17,10)" fg:x="2142" fg:w="38"/><text x="46.2749%" y="383.50"></text></g><g><title>core::ptr::write (38 samples, 0.82%)</title><rect x="46.0249%" y="357" width="0.8165%" height="15" fill="rgb(242,107,0)" fg:x="2142" fg:w="38"/><text x="46.2749%" y="367.50"></text></g><g><title>core::mem::size_of_val (9 samples, 0.19%)</title><rect x="46.8414%" y="405" width="0.1934%" height="15" fill="rgb(251,28,31)" fg:x="2180" fg:w="9"/><text x="47.0914%" y="415.50"></text></g><g><title>__free (125 samples, 2.69%)</title><rect x="47.1422%" y="341" width="2.6859%" height="15" fill="rgb(233,223,10)" fg:x="2194" fg:w="125"/><text x="47.3922%" y="351.50">__..</text></g><g><title>_int_free (87 samples, 1.87%)</title><rect x="47.9587%" y="325" width="1.8694%" height="15" fill="rgb(215,21,27)" fg:x="2232" fg:w="87"/><text x="48.2087%" y="335.50">_..</text></g><g><title>__rdl_dealloc (7 samples, 0.15%)</title><rect x="49.8281%" y="341" width="0.1504%" height="15" fill="rgb(232,23,21)" fg:x="2319" fg:w="7"/><text x="50.0781%" y="351.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (7 samples, 0.15%)</title><rect x="49.8281%" y="325" width="0.1504%" height="15" fill="rgb(244,5,23)" fg:x="2319" fg:w="7"/><text x="50.0781%" y="335.50"></text></g><g><title>alloc::alloc::box_free (145 samples, 3.12%)</title><rect x="47.0348%" y="389" width="3.1156%" height="15" fill="rgb(226,81,46)" fg:x="2189" fg:w="145"/><text x="47.2848%" y="399.50">all..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (145 samples, 3.12%)</title><rect x="47.0348%" y="373" width="3.1156%" height="15" fill="rgb(247,70,30)" fg:x="2189" fg:w="145"/><text x="47.2848%" y="383.50">&lt;al..</text></g><g><title>alloc::alloc::dealloc (143 samples, 3.07%)</title><rect x="47.0778%" y="357" width="3.0726%" height="15" fill="rgb(212,68,19)" fg:x="2191" fg:w="143"/><text x="47.3278%" y="367.50">all..</text></g><g><title>__rust_dealloc (8 samples, 0.17%)</title><rect x="49.9785%" y="341" width="0.1719%" height="15" fill="rgb(240,187,13)" fg:x="2326" fg:w="8"/><text x="50.2285%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;alloc::vec::Vec&lt;toyjs_vm::value::nan_tagged::Value&gt;&gt;&gt; (35 samples, 0.75%)</title><rect x="50.5587%" y="341" width="0.7520%" height="15" fill="rgb(223,113,26)" fg:x="2353" fg:w="35"/><text x="50.8087%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;toyjs_vm::value::nan_tagged::Value&gt;&gt; (35 samples, 0.75%)</title><rect x="50.5587%" y="325" width="0.7520%" height="15" fill="rgb(206,192,2)" fg:x="2353" fg:w="35"/><text x="50.8087%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;toyjs_vm::value::nan_tagged::Value&gt;&gt; (35 samples, 0.75%)</title><rect x="50.5587%" y="309" width="0.7520%" height="15" fill="rgb(241,108,4)" fg:x="2353" fg:w="35"/><text x="50.8087%" y="319.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (35 samples, 0.75%)</title><rect x="50.5587%" y="293" width="0.7520%" height="15" fill="rgb(247,173,49)" fg:x="2353" fg:w="35"/><text x="50.8087%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (28 samples, 0.60%)</title><rect x="50.7091%" y="277" width="0.6016%" height="15" fill="rgb(224,114,35)" fg:x="2360" fg:w="28"/><text x="50.9591%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;toyjs_vm::gc::ptr::GcBox&lt;dyn toyjs_vm::gc::trace::Trace&gt;&gt;&gt; (224 samples, 4.81%)</title><rect x="47.0348%" y="405" width="4.8131%" height="15" fill="rgb(245,159,27)" fg:x="2189" fg:w="224"/><text x="47.2848%" y="415.50">core::..</text></g><g><title>core::ptr::drop_in_place&lt;toyjs_vm::gc::ptr::GcBox&lt;dyn toyjs_vm::gc::trace::Trace&gt;&gt; (79 samples, 1.70%)</title><rect x="50.1504%" y="389" width="1.6975%" height="15" fill="rgb(245,172,44)" fg:x="2334" fg:w="79"/><text x="50.4004%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;dyn toyjs_vm::gc::trace::Trace&gt;&gt; (74 samples, 1.59%)</title><rect x="50.2578%" y="373" width="1.5900%" height="15" fill="rgb(236,23,11)" fg:x="2339" fg:w="74"/><text x="50.5078%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;toyjs_vm::object::Object&gt; (72 samples, 1.55%)</title><rect x="50.3008%" y="357" width="1.5471%" height="15" fill="rgb(205,117,38)" fg:x="2341" fg:w="72"/><text x="50.5508%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,toyjs_vm::value::nan_tagged::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (25 samples, 0.54%)</title><rect x="51.3107%" y="341" width="0.5372%" height="15" fill="rgb(237,72,25)" fg:x="2388" fg:w="25"/><text x="51.5607%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,toyjs_vm::value::nan_tagged::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (25 samples, 0.54%)</title><rect x="51.3107%" y="325" width="0.5372%" height="15" fill="rgb(244,70,9)" fg:x="2388" fg:w="25"/><text x="51.5607%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,toyjs_vm::value::nan_tagged::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (25 samples, 0.54%)</title><rect x="51.3107%" y="309" width="0.5372%" height="15" fill="rgb(217,125,39)" fg:x="2388" fg:w="25"/><text x="51.5607%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,toyjs_vm::value::nan_tagged::Value)&gt;&gt; (25 samples, 0.54%)</title><rect x="51.3107%" y="293" width="0.5372%" height="15" fill="rgb(235,36,10)" fg:x="2388" fg:w="25"/><text x="51.5607%" y="303.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 0.54%)</title><rect x="51.3107%" y="277" width="0.5372%" height="15" fill="rgb(251,123,47)" fg:x="2388" fg:w="25"/><text x="51.5607%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::is_empty_singleton (14 samples, 0.30%)</title><rect x="51.5471%" y="261" width="0.3008%" height="15" fill="rgb(221,13,13)" fg:x="2399" fg:w="14"/><text x="51.7971%" y="271.50"></text></g><g><title>toyjs_vm::gc::GcArena::collect_debt (482 samples, 10.36%)</title><rect x="41.5127%" y="421" width="10.3567%" height="15" fill="rgb(238,131,9)" fg:x="1932" fg:w="482"/><text x="41.7627%" y="431.50">toyjs_vm::gc::G..</text></g><g><title>toyjs_common::cell_vec::CellVec&lt;T,A&gt;::pop (1 samples, 0.02%)</title><rect x="51.8479%" y="405" width="0.0215%" height="15" fill="rgb(211,50,8)" fg:x="2413" fg:w="1"/><text x="52.0979%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (1 samples, 0.02%)</title><rect x="51.8479%" y="389" width="0.0215%" height="15" fill="rgb(245,182,24)" fg:x="2413" fg:w="1"/><text x="52.0979%" y="399.50"></text></g><g><title>__free (83 samples, 1.78%)</title><rect x="52.8363%" y="309" width="1.7834%" height="15" fill="rgb(242,14,37)" fg:x="2459" fg:w="83"/><text x="53.0863%" y="319.50">_..</text></g><g><title>_int_free (63 samples, 1.35%)</title><rect x="53.2660%" y="293" width="1.3537%" height="15" fill="rgb(246,228,12)" fg:x="2479" fg:w="63"/><text x="53.5160%" y="303.50"></text></g><g><title>__rdl_dealloc (8 samples, 0.17%)</title><rect x="54.6197%" y="309" width="0.1719%" height="15" fill="rgb(213,55,15)" fg:x="2542" fg:w="8"/><text x="54.8697%" y="319.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (8 samples, 0.17%)</title><rect x="54.6197%" y="293" width="0.1719%" height="15" fill="rgb(209,9,3)" fg:x="2542" fg:w="8"/><text x="54.8697%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="54.7701%" y="277" width="0.0215%" height="15" fill="rgb(230,59,30)" fg:x="2549" fg:w="1"/><text x="55.0201%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="54.7701%" y="261" width="0.0215%" height="15" fill="rgb(209,121,21)" fg:x="2549" fg:w="1"/><text x="55.0201%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (94 samples, 2.02%)</title><rect x="52.8363%" y="341" width="2.0198%" height="15" fill="rgb(220,109,13)" fg:x="2459" fg:w="94"/><text x="53.0863%" y="351.50">&lt;..</text></g><g><title>alloc::alloc::dealloc (94 samples, 2.02%)</title><rect x="52.8363%" y="325" width="2.0198%" height="15" fill="rgb(232,18,1)" fg:x="2459" fg:w="94"/><text x="53.0863%" y="335.50">a..</text></g><g><title>__rust_dealloc (3 samples, 0.06%)</title><rect x="54.7916%" y="309" width="0.0645%" height="15" fill="rgb(215,41,42)" fg:x="2550" fg:w="3"/><text x="55.0416%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (100 samples, 2.15%)</title><rect x="52.8363%" y="405" width="2.1487%" height="15" fill="rgb(224,123,36)" fg:x="2459" fg:w="100"/><text x="53.0863%" y="415.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (100 samples, 2.15%)</title><rect x="52.8363%" y="389" width="2.1487%" height="15" fill="rgb(240,125,3)" fg:x="2459" fg:w="100"/><text x="53.0863%" y="399.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (100 samples, 2.15%)</title><rect x="52.8363%" y="373" width="2.1487%" height="15" fill="rgb(205,98,50)" fg:x="2459" fg:w="100"/><text x="53.0863%" y="383.50">c..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (100 samples, 2.15%)</title><rect x="52.8363%" y="357" width="2.1487%" height="15" fill="rgb(205,185,37)" fg:x="2459" fg:w="100"/><text x="53.0863%" y="367.50">&lt;..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (6 samples, 0.13%)</title><rect x="54.8560%" y="341" width="0.1289%" height="15" fill="rgb(238,207,15)" fg:x="2553" fg:w="6"/><text x="55.1060%" y="351.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (22 samples, 0.47%)</title><rect x="55.8444%" y="229" width="0.4727%" height="15" fill="rgb(213,199,42)" fg:x="2599" fg:w="22"/><text x="56.0944%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.02%)</title><rect x="56.3171%" y="213" width="0.0215%" height="15" fill="rgb(235,201,11)" fg:x="2621" fg:w="1"/><text x="56.5671%" y="223.50"></text></g><g><title>&lt;u64 as fxhash::HashWord&gt;::hash_word (6 samples, 0.13%)</title><rect x="56.3171%" y="229" width="0.1289%" height="15" fill="rgb(207,46,11)" fg:x="2621" fg:w="6"/><text x="56.5671%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (5 samples, 0.11%)</title><rect x="56.3386%" y="213" width="0.1074%" height="15" fill="rgb(241,35,35)" fg:x="2622" fg:w="5"/><text x="56.5886%" y="223.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write (48 samples, 1.03%)</title><rect x="55.4792%" y="277" width="1.0314%" height="15" fill="rgb(243,32,47)" fg:x="2582" fg:w="48"/><text x="55.7292%" y="287.50"></text></g><g><title>fxhash::write (48 samples, 1.03%)</title><rect x="55.4792%" y="261" width="1.0314%" height="15" fill="rgb(247,202,23)" fg:x="2582" fg:w="48"/><text x="55.7292%" y="271.50"></text></g><g><title>fxhash::write64 (48 samples, 1.03%)</title><rect x="55.4792%" y="245" width="1.0314%" height="15" fill="rgb(219,102,11)" fg:x="2582" fg:w="48"/><text x="55.7292%" y="255.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (3 samples, 0.06%)</title><rect x="56.4461%" y="229" width="0.0645%" height="15" fill="rgb(243,110,44)" fg:x="2627" fg:w="3"/><text x="56.6961%" y="239.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (3 samples, 0.06%)</title><rect x="56.4461%" y="213" width="0.0645%" height="15" fill="rgb(222,74,54)" fg:x="2627" fg:w="3"/><text x="56.6961%" y="223.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (3 samples, 0.06%)</title><rect x="56.4461%" y="197" width="0.0645%" height="15" fill="rgb(216,99,12)" fg:x="2627" fg:w="3"/><text x="56.6961%" y="207.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (3 samples, 0.06%)</title><rect x="56.4461%" y="181" width="0.0645%" height="15" fill="rgb(226,22,26)" fg:x="2627" fg:w="3"/><text x="56.6961%" y="191.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (3 samples, 0.06%)</title><rect x="56.4461%" y="165" width="0.0645%" height="15" fill="rgb(217,163,10)" fg:x="2627" fg:w="3"/><text x="56.6961%" y="175.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (3 samples, 0.06%)</title><rect x="56.4461%" y="149" width="0.0645%" height="15" fill="rgb(213,25,53)" fg:x="2627" fg:w="3"/><text x="56.6961%" y="159.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (3 samples, 0.06%)</title><rect x="56.4461%" y="133" width="0.0645%" height="15" fill="rgb(252,105,26)" fg:x="2627" fg:w="3"/><text x="56.6961%" y="143.50"></text></g><g><title>&lt;usize as core::ops::bit::BitXor&gt;::bitxor (8 samples, 0.17%)</title><rect x="56.5105%" y="245" width="0.1719%" height="15" fill="rgb(220,39,43)" fg:x="2630" fg:w="8"/><text x="56.7605%" y="255.50"></text></g><g><title>hashbrown::map::make_hash (94 samples, 2.02%)</title><rect x="54.9850%" y="357" width="2.0198%" height="15" fill="rgb(229,68,48)" fg:x="2559" fg:w="94"/><text x="55.2350%" y="367.50">h..</text></g><g><title>core::hash::BuildHasher::hash_one (87 samples, 1.87%)</title><rect x="55.1354%" y="341" width="1.8694%" height="15" fill="rgb(252,8,32)" fg:x="2566" fg:w="87"/><text x="55.3854%" y="351.50">c..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (71 samples, 1.53%)</title><rect x="55.4792%" y="325" width="1.5256%" height="15" fill="rgb(223,20,43)" fg:x="2582" fg:w="71"/><text x="55.7292%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (71 samples, 1.53%)</title><rect x="55.4792%" y="309" width="1.5256%" height="15" fill="rgb(229,81,49)" fg:x="2582" fg:w="71"/><text x="55.7292%" y="319.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (71 samples, 1.53%)</title><rect x="55.4792%" y="293" width="1.5256%" height="15" fill="rgb(236,28,36)" fg:x="2582" fg:w="71"/><text x="55.7292%" y="303.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write_u8 (23 samples, 0.49%)</title><rect x="56.5105%" y="277" width="0.4942%" height="15" fill="rgb(249,185,26)" fg:x="2630" fg:w="23"/><text x="56.7605%" y="287.50"></text></g><g><title>&lt;usize as fxhash::HashWord&gt;::hash_word (23 samples, 0.49%)</title><rect x="56.5105%" y="261" width="0.4942%" height="15" fill="rgb(249,174,33)" fg:x="2630" fg:w="23"/><text x="56.7605%" y="271.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_mul (15 samples, 0.32%)</title><rect x="56.6824%" y="245" width="0.3223%" height="15" fill="rgb(233,201,37)" fg:x="2638" fg:w="15"/><text x="56.9324%" y="255.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (34 samples, 0.73%)</title><rect x="57.9931%" y="309" width="0.7306%" height="15" fill="rgb(221,78,26)" fg:x="2699" fg:w="34"/><text x="58.2431%" y="319.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (34 samples, 0.73%)</title><rect x="57.9931%" y="293" width="0.7306%" height="15" fill="rgb(250,127,30)" fg:x="2699" fg:w="34"/><text x="58.2431%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::ops::index::Index&lt;core::ops::range::RangeFull&gt;&gt;::index (6 samples, 0.13%)</title><rect x="58.7237%" y="261" width="0.1289%" height="15" fill="rgb(230,49,44)" fg:x="2733" fg:w="6"/><text x="58.9737%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (6 samples, 0.13%)</title><rect x="58.7237%" y="245" width="0.1289%" height="15" fill="rgb(229,67,23)" fg:x="2733" fg:w="6"/><text x="58.9737%" y="255.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (184 samples, 3.95%)</title><rect x="58.7237%" y="293" width="3.9536%" height="15" fill="rgb(249,83,47)" fg:x="2733" fg:w="184"/><text x="58.9737%" y="303.50">hash..</text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (184 samples, 3.95%)</title><rect x="58.7237%" y="277" width="3.9536%" height="15" fill="rgb(215,43,3)" fg:x="2733" fg:w="184"/><text x="58.9737%" y="287.50">&lt;all..</text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (178 samples, 3.82%)</title><rect x="58.8526%" y="261" width="3.8247%" height="15" fill="rgb(238,154,13)" fg:x="2739" fg:w="178"/><text x="59.1026%" y="271.50">core..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (178 samples, 3.82%)</title><rect x="58.8526%" y="245" width="3.8247%" height="15" fill="rgb(219,56,2)" fg:x="2739" fg:w="178"/><text x="59.1026%" y="255.50">core..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (178 samples, 3.82%)</title><rect x="58.8526%" y="229" width="3.8247%" height="15" fill="rgb(233,0,4)" fg:x="2739" fg:w="178"/><text x="59.1026%" y="239.50">core..</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (178 samples, 3.82%)</title><rect x="58.8526%" y="213" width="3.8247%" height="15" fill="rgb(235,30,7)" fg:x="2739" fg:w="178"/><text x="59.1026%" y="223.50">&lt;[A]..</text></g><g><title>__memcmp_avx2_movbe (123 samples, 2.64%)</title><rect x="60.0344%" y="197" width="2.6429%" height="15" fill="rgb(250,79,13)" fg:x="2794" fg:w="123"/><text x="60.2844%" y="207.50">__..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (192 samples, 4.13%)</title><rect x="58.7237%" y="309" width="4.1255%" height="15" fill="rgb(211,146,34)" fg:x="2733" fg:w="192"/><text x="58.9737%" y="319.50">hash..</text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (8 samples, 0.17%)</title><rect x="62.6773%" y="293" width="0.1719%" height="15" fill="rgb(228,22,38)" fg:x="2917" fg:w="8"/><text x="62.9273%" y="303.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (8 samples, 0.17%)</title><rect x="62.6773%" y="277" width="0.1719%" height="15" fill="rgb(235,168,5)" fg:x="2917" fg:w="8"/><text x="62.9273%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (8 samples, 0.17%)</title><rect x="62.6773%" y="261" width="0.1719%" height="15" fill="rgb(221,155,16)" fg:x="2917" fg:w="8"/><text x="62.9273%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (8 samples, 0.17%)</title><rect x="62.6773%" y="245" width="0.1719%" height="15" fill="rgb(215,215,53)" fg:x="2917" fg:w="8"/><text x="62.9273%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (6 samples, 0.13%)</title><rect x="62.8492%" y="309" width="0.1289%" height="15" fill="rgb(223,4,10)" fg:x="2925" fg:w="6"/><text x="63.0992%" y="319.50"></text></g><g><title>hashbrown::raw::h2 (10 samples, 0.21%)</title><rect x="62.9781%" y="309" width="0.2149%" height="15" fill="rgb(234,103,6)" fg:x="2931" fg:w="10"/><text x="63.2281%" y="319.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (58 samples, 1.25%)</title><rect x="63.1930%" y="309" width="1.2462%" height="15" fill="rgb(227,97,0)" fg:x="2941" fg:w="58"/><text x="63.4430%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (58 samples, 1.25%)</title><rect x="63.1930%" y="293" width="1.2462%" height="15" fill="rgb(234,150,53)" fg:x="2941" fg:w="58"/><text x="63.4430%" y="303.50"></text></g><g><title>toyjs_vm::object::Object::unsafe_index (58 samples, 1.25%)</title><rect x="63.1930%" y="277" width="1.2462%" height="15" fill="rgb(228,201,54)" fg:x="2941" fg:w="58"/><text x="63.4430%" y="287.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (11 samples, 0.24%)</title><rect x="64.4392%" y="309" width="0.2364%" height="15" fill="rgb(222,22,37)" fg:x="2999" fg:w="11"/><text x="64.6892%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (11 samples, 0.24%)</title><rect x="64.4392%" y="293" width="0.2364%" height="15" fill="rgb(237,53,32)" fg:x="2999" fg:w="11"/><text x="64.6892%" y="303.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (512 samples, 11.00%)</title><rect x="54.9850%" y="405" width="11.0013%" height="15" fill="rgb(233,25,53)" fg:x="2559" fg:w="512"/><text x="55.2350%" y="415.50">std::collections..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (512 samples, 11.00%)</title><rect x="54.9850%" y="389" width="11.0013%" height="15" fill="rgb(210,40,34)" fg:x="2559" fg:w="512"/><text x="55.2350%" y="399.50">hashbrown::map::..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (512 samples, 11.00%)</title><rect x="54.9850%" y="373" width="11.0013%" height="15" fill="rgb(241,220,44)" fg:x="2559" fg:w="512"/><text x="55.2350%" y="383.50">hashbrown::map::..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (418 samples, 8.98%)</title><rect x="57.0047%" y="357" width="8.9815%" height="15" fill="rgb(235,28,35)" fg:x="2653" fg:w="418"/><text x="57.2547%" y="367.50">hashbrown::ra..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (418 samples, 8.98%)</title><rect x="57.0047%" y="341" width="8.9815%" height="15" fill="rgb(210,56,17)" fg:x="2653" fg:w="418"/><text x="57.2547%" y="351.50">hashbrown::ra..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (418 samples, 8.98%)</title><rect x="57.0047%" y="325" width="8.9815%" height="15" fill="rgb(224,130,29)" fg:x="2653" fg:w="418"/><text x="57.2547%" y="335.50">hashbrown::ra..</text></g><g><title>toyjs_vm::object::Object::unsafe_index (61 samples, 1.31%)</title><rect x="64.6755%" y="309" width="1.3107%" height="15" fill="rgb(235,212,8)" fg:x="3010" fg:w="61"/><text x="64.9255%" y="319.50"></text></g><g><title>__GI___libc_malloc (188 samples, 4.04%)</title><rect x="69.2523%" y="197" width="4.0395%" height="15" fill="rgb(223,33,50)" fg:x="3223" fg:w="188"/><text x="69.5023%" y="207.50">__GI..</text></g><g><title>__rdl_alloc (72 samples, 1.55%)</title><rect x="73.2918%" y="197" width="1.5471%" height="15" fill="rgb(219,149,13)" fg:x="3411" fg:w="72"/><text x="73.5418%" y="207.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (64 samples, 1.38%)</title><rect x="73.4637%" y="181" width="1.3752%" height="15" fill="rgb(250,156,29)" fg:x="3419" fg:w="64"/><text x="73.7137%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (292 samples, 6.27%)</title><rect x="68.8010%" y="293" width="6.2742%" height="15" fill="rgb(216,193,19)" fg:x="3202" fg:w="292"/><text x="69.0510%" y="303.50">alloc::v..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (292 samples, 6.27%)</title><rect x="68.8010%" y="277" width="6.2742%" height="15" fill="rgb(216,135,14)" fg:x="3202" fg:w="292"/><text x="69.0510%" y="287.50">alloc::r..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (292 samples, 6.27%)</title><rect x="68.8010%" y="261" width="6.2742%" height="15" fill="rgb(241,47,5)" fg:x="3202" fg:w="292"/><text x="69.0510%" y="271.50">alloc::r..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (292 samples, 6.27%)</title><rect x="68.8010%" y="245" width="6.2742%" height="15" fill="rgb(233,42,35)" fg:x="3202" fg:w="292"/><text x="69.0510%" y="255.50">&lt;alloc::..</text></g><g><title>alloc::alloc::Global::alloc_impl (292 samples, 6.27%)</title><rect x="68.8010%" y="229" width="6.2742%" height="15" fill="rgb(231,13,6)" fg:x="3202" fg:w="292"/><text x="69.0510%" y="239.50">alloc::a..</text></g><g><title>alloc::alloc::alloc (281 samples, 6.04%)</title><rect x="69.0374%" y="213" width="6.0378%" height="15" fill="rgb(207,181,40)" fg:x="3213" fg:w="281"/><text x="69.2874%" y="223.50">alloc::a..</text></g><g><title>__rust_alloc (11 samples, 0.24%)</title><rect x="74.8388%" y="197" width="0.2364%" height="15" fill="rgb(254,173,49)" fg:x="3483" fg:w="11"/><text x="75.0888%" y="207.50"></text></g><g><title>__memcpy_avx_unaligned_erms (5 samples, 0.11%)</title><rect x="75.1182%" y="261" width="0.1074%" height="15" fill="rgb(221,1,38)" fg:x="3496" fg:w="5"/><text x="75.3682%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (401 samples, 8.62%)</title><rect x="67.2110%" y="373" width="8.6162%" height="15" fill="rgb(206,124,46)" fg:x="3128" fg:w="401"/><text x="67.4610%" y="383.50">&lt;alloc::stri..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (327 samples, 7.03%)</title><rect x="68.8010%" y="357" width="7.0262%" height="15" fill="rgb(249,21,11)" fg:x="3202" fg:w="327"/><text x="69.0510%" y="367.50">&lt;alloc::v..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (327 samples, 7.03%)</title><rect x="68.8010%" y="341" width="7.0262%" height="15" fill="rgb(222,201,40)" fg:x="3202" fg:w="327"/><text x="69.0510%" y="351.50">alloc::sl..</text></g><g><title>alloc::slice::hack::to_vec (327 samples, 7.03%)</title><rect x="68.8010%" y="325" width="7.0262%" height="15" fill="rgb(235,61,29)" fg:x="3202" fg:w="327"/><text x="69.0510%" y="335.50">alloc::sl..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (327 samples, 7.03%)</title><rect x="68.8010%" y="309" width="7.0262%" height="15" fill="rgb(219,207,3)" fg:x="3202" fg:w="327"/><text x="69.0510%" y="319.50">&lt;T as all..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (35 samples, 0.75%)</title><rect x="75.0752%" y="293" width="0.7520%" height="15" fill="rgb(222,56,46)" fg:x="3494" fg:w="35"/><text x="75.3252%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (35 samples, 0.75%)</title><rect x="75.0752%" y="277" width="0.7520%" height="15" fill="rgb(239,76,54)" fg:x="3494" fg:w="35"/><text x="75.3252%" y="287.50"></text></g><g><title>__memmove_avx_unaligned (28 samples, 0.60%)</title><rect x="75.2256%" y="261" width="0.6016%" height="15" fill="rgb(231,124,27)" fg:x="3501" fg:w="28"/><text x="75.4756%" y="271.50"></text></g><g><title>&lt;toyjs_vm::gc::ptr::Gc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (11 samples, 0.24%)</title><rect x="75.8272%" y="373" width="0.2364%" height="15" fill="rgb(249,195,6)" fg:x="3529" fg:w="11"/><text x="76.0772%" y="383.50"></text></g><g><title>core::cell::UnsafeCell&lt;T&gt;::get (11 samples, 0.24%)</title><rect x="75.8272%" y="357" width="0.2364%" height="15" fill="rgb(237,174,47)" fg:x="3529" fg:w="11"/><text x="76.0772%" y="367.50"></text></g><g><title>toyjs_vm::object::Object::unsafe_index (1,131 samples, 24.30%)</title><rect x="51.8694%" y="421" width="24.3017%" height="15" fill="rgb(206,201,31)" fg:x="2414" fg:w="1131"/><text x="52.1194%" y="431.50">toyjs_vm::object::Object::unsafe_index</text></g><g><title>toyjs_vm::realm::ctx::RealmCtx::coerce_string (474 samples, 10.18%)</title><rect x="65.9862%" y="405" width="10.1848%" height="15" fill="rgb(231,57,52)" fg:x="3071" fg:w="474"/><text x="66.2362%" y="415.50">toyjs_vm::realm..</text></g><g><title>toyjs_vm::realm::exec::&lt;impl toyjs_vm::realm::Realm&gt;::coerce_string (473 samples, 10.16%)</title><rect x="66.0077%" y="389" width="10.1633%" height="15" fill="rgb(248,177,22)" fg:x="3072" fg:w="473"/><text x="66.2577%" y="399.50">toyjs_vm::realm..</text></g><g><title>toyjs_vm::value::nan_tagged::Value::is_float (5 samples, 0.11%)</title><rect x="76.0636%" y="373" width="0.1074%" height="15" fill="rgb(215,211,37)" fg:x="3540" fg:w="5"/><text x="76.3136%" y="383.50"></text></g><g><title>toyjs_vm::realm::exec::&lt;impl toyjs_vm::realm::Realm&gt;::both_int (14 samples, 0.30%)</title><rect x="76.1710%" y="421" width="0.3008%" height="15" fill="rgb(241,128,51)" fg:x="3545" fg:w="14"/><text x="76.4210%" y="431.50"></text></g><g><title>toyjs_vm::value::nan_tagged::Value::is_int (14 samples, 0.30%)</title><rect x="76.1710%" y="405" width="0.3008%" height="15" fill="rgb(227,165,31)" fg:x="3545" fg:w="14"/><text x="76.4210%" y="415.50"></text></g><g><title>toyjs_vm::realm::exec::&lt;impl toyjs_vm::realm::Realm&gt;::execute (7 samples, 0.15%)</title><rect x="77.5462%" y="405" width="0.1504%" height="15" fill="rgb(228,167,24)" fg:x="3609" fg:w="7"/><text x="77.7962%" y="415.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (1 samples, 0.02%)</title><rect x="77.8255%" y="373" width="0.0215%" height="15" fill="rgb(228,143,12)" fg:x="3622" fg:w="1"/><text x="78.0755%" y="383.50"></text></g><g><title>toyjs_vm::realm::reader::InstructionReader::from_bc (10 samples, 0.21%)</title><rect x="77.6966%" y="405" width="0.2149%" height="15" fill="rgb(249,149,8)" fg:x="3616" fg:w="10"/><text x="77.9466%" y="415.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (4 samples, 0.09%)</title><rect x="77.8255%" y="389" width="0.0859%" height="15" fill="rgb(243,35,44)" fg:x="3622" fg:w="4"/><text x="78.0755%" y="399.50"></text></g><g><title>toyjs_vm::realm::exec::&lt;impl toyjs_vm::realm::Realm&gt;::execute (3 samples, 0.06%)</title><rect x="77.8470%" y="373" width="0.0645%" height="15" fill="rgb(246,89,9)" fg:x="3623" fg:w="3"/><text x="78.0970%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (17 samples, 0.37%)</title><rect x="80.9841%" y="389" width="0.3653%" height="15" fill="rgb(233,213,13)" fg:x="3769" fg:w="17"/><text x="81.2341%" y="399.50"></text></g><g><title>core::ptr::write (16 samples, 0.34%)</title><rect x="81.0056%" y="373" width="0.3438%" height="15" fill="rgb(233,141,41)" fg:x="3770" fg:w="16"/><text x="81.2556%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (4 samples, 0.09%)</title><rect x="81.3494%" y="389" width="0.0859%" height="15" fill="rgb(239,167,4)" fg:x="3786" fg:w="4"/><text x="81.5994%" y="399.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (4 samples, 0.09%)</title><rect x="81.3494%" y="373" width="0.0859%" height="15" fill="rgb(209,217,16)" fg:x="3786" fg:w="4"/><text x="81.5994%" y="383.50"></text></g><g><title>core::ptr::write (10 samples, 0.21%)</title><rect x="81.4353%" y="373" width="0.2149%" height="15" fill="rgb(219,88,35)" fg:x="3790" fg:w="10"/><text x="81.6853%" y="383.50"></text></g><g><title>toyjs_vm::realm::exec::&lt;impl toyjs_vm::realm::Realm&gt;::call (263 samples, 5.65%)</title><rect x="76.4719%" y="421" width="5.6511%" height="15" fill="rgb(220,193,23)" fg:x="3559" fg:w="263"/><text x="76.7219%" y="431.50">toyjs_v..</text></g><g><title>toyjs_vm::realm::stack::Stack::enter_call (196 samples, 4.21%)</title><rect x="77.9115%" y="405" width="4.2114%" height="15" fill="rgb(230,90,52)" fg:x="3626" fg:w="196"/><text x="78.1615%" y="415.50">toyjs..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (32 samples, 0.69%)</title><rect x="81.4353%" y="389" width="0.6876%" height="15" fill="rgb(252,106,19)" fg:x="3790" fg:w="32"/><text x="81.6853%" y="399.50"></text></g><g><title>toyjs_vm::realm::exec::&lt;impl toyjs_vm::realm::Realm&gt;::execute (22 samples, 0.47%)</title><rect x="81.6502%" y="373" width="0.4727%" height="15" fill="rgb(206,74,20)" fg:x="3800" fg:w="22"/><text x="81.9002%" y="383.50"></text></g><g><title>toyjs_vm::realm::exec::&lt;impl toyjs_vm::realm::Realm&gt;::coerce_int (73 samples, 1.57%)</title><rect x="82.1229%" y="421" width="1.5685%" height="15" fill="rgb(230,138,44)" fg:x="3822" fg:w="73"/><text x="82.3729%" y="431.50"></text></g><g><title>toyjs_vm::realm::exec::&lt;impl toyjs_vm::realm::Realm&gt;::execute (66 samples, 1.42%)</title><rect x="83.6914%" y="421" width="1.4181%" height="15" fill="rgb(235,182,43)" fg:x="3895" fg:w="66"/><text x="83.9414%" y="431.50"></text></g><g><title>toyjs_vm::realm::exec::&lt;impl toyjs_vm::realm::Realm&gt;::is_falsish (143 samples, 3.07%)</title><rect x="85.1096%" y="421" width="3.0726%" height="15" fill="rgb(242,16,51)" fg:x="3961" fg:w="143"/><text x="85.3596%" y="431.50">toy..</text></g><g><title>toyjs_vm::value::nan_tagged::Value::is_int (99 samples, 2.13%)</title><rect x="86.0550%" y="405" width="2.1272%" height="15" fill="rgb(248,9,4)" fg:x="4005" fg:w="99"/><text x="86.3050%" y="415.50">t..</text></g><g><title>toyjs_vm::realm::reader::InstructionReader::constant (202 samples, 4.34%)</title><rect x="88.1822%" y="421" width="4.3404%" height="15" fill="rgb(210,31,22)" fg:x="4104" fg:w="202"/><text x="88.4322%" y="431.50">toyjs..</text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="92.5011%" y="405" width="0.0215%" height="15" fill="rgb(239,54,39)" fg:x="4305" fg:w="1"/><text x="92.7511%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (50 samples, 1.07%)</title><rect x="92.9093%" y="405" width="1.0743%" height="15" fill="rgb(230,99,41)" fg:x="4324" fg:w="50"/><text x="93.1593%" y="415.50"></text></g><g><title>core::ptr::read (14 samples, 0.30%)</title><rect x="93.6829%" y="389" width="0.3008%" height="15" fill="rgb(253,106,12)" fg:x="4360" fg:w="14"/><text x="93.9329%" y="399.50"></text></g><g><title>toyjs_vm::realm::exec::&lt;impl toyjs_vm::realm::Realm&gt;::execute (5 samples, 0.11%)</title><rect x="93.9837%" y="405" width="0.1074%" height="15" fill="rgb(213,46,41)" fg:x="4374" fg:w="5"/><text x="94.2337%" y="415.50"></text></g><g><title>toyjs_vm::realm::stack::Stack::pop (91 samples, 1.96%)</title><rect x="92.5226%" y="421" width="1.9553%" height="15" fill="rgb(215,133,35)" fg:x="4306" fg:w="91"/><text x="92.7726%" y="431.50">t..</text></g><g><title>toyjs_vm::realm::stack::Stack::restore_frame (18 samples, 0.39%)</title><rect x="94.0911%" y="405" width="0.3868%" height="15" fill="rgb(213,28,5)" fg:x="4379" fg:w="18"/><text x="94.3411%" y="415.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (4 samples, 0.09%)</title><rect x="94.3919%" y="389" width="0.0859%" height="15" fill="rgb(215,77,49)" fg:x="4393" fg:w="4"/><text x="94.6419%" y="399.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (4 samples, 0.09%)</title><rect x="94.3919%" y="373" width="0.0859%" height="15" fill="rgb(248,100,22)" fg:x="4393" fg:w="4"/><text x="94.6419%" y="383.50"></text></g><g><title>toyjs_vm::realm::stack::Stack::push (61 samples, 1.31%)</title><rect x="94.4779%" y="421" width="1.3107%" height="15" fill="rgb(208,67,9)" fg:x="4397" fg:w="61"/><text x="94.7279%" y="431.50"></text></g><g><title>toyjs_vm::realm::stack::Stack::used (52 samples, 1.12%)</title><rect x="94.6713%" y="405" width="1.1173%" height="15" fill="rgb(219,133,21)" fg:x="4406" fg:w="52"/><text x="94.9213%" y="415.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset_from (52 samples, 1.12%)</title><rect x="94.6713%" y="389" width="1.1173%" height="15" fill="rgb(246,46,29)" fg:x="4406" fg:w="52"/><text x="94.9213%" y="399.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset_from (52 samples, 1.12%)</title><rect x="94.6713%" y="373" width="1.1173%" height="15" fill="rgb(246,185,52)" fg:x="4406" fg:w="52"/><text x="94.9213%" y="383.50"></text></g><g><title>toyjs_vm::realm::stack::Stack::read (111 samples, 2.39%)</title><rect x="95.7886%" y="421" width="2.3850%" height="15" fill="rgb(252,136,11)" fg:x="4458" fg:w="111"/><text x="96.0386%" y="431.50">to..</text></g><g><title>toyjs_vm::realm::stack::Stack::write (31 samples, 0.67%)</title><rect x="98.1736%" y="421" width="0.6661%" height="15" fill="rgb(219,138,53)" fg:x="4569" fg:w="31"/><text x="98.4236%" y="431.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (31 samples, 0.67%)</title><rect x="98.1736%" y="405" width="0.6661%" height="15" fill="rgb(211,51,23)" fg:x="4569" fg:w="31"/><text x="98.4236%" y="415.50"></text></g><g><title>core::ptr::write (31 samples, 0.67%)</title><rect x="98.1736%" y="389" width="0.6661%" height="15" fill="rgb(247,221,28)" fg:x="4569" fg:w="31"/><text x="98.4236%" y="399.50"></text></g><g><title>toyjs_vm::value::nan_tagged::Value::is_object (33 samples, 0.71%)</title><rect x="98.8397%" y="421" width="0.7091%" height="15" fill="rgb(251,222,45)" fg:x="4600" fg:w="33"/><text x="99.0897%" y="431.50"></text></g><g><title>std::panic::catch_unwind (4,633 samples, 99.55%)</title><rect x="0.1074%" y="565" width="99.5488%" height="15" fill="rgb(217,162,53)" fg:x="5" fg:w="4633"/><text x="0.3574%" y="575.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (4,633 samples, 99.55%)</title><rect x="0.1074%" y="549" width="99.5488%" height="15" fill="rgb(229,93,14)" fg:x="5" fg:w="4633"/><text x="0.3574%" y="559.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (4,633 samples, 99.55%)</title><rect x="0.1074%" y="533" width="99.5488%" height="15" fill="rgb(209,67,49)" fg:x="5" fg:w="4633"/><text x="0.3574%" y="543.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (4,633 samples, 99.55%)</title><rect x="0.1074%" y="517" width="99.5488%" height="15" fill="rgb(213,87,29)" fg:x="5" fg:w="4633"/><text x="0.3574%" y="527.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (4,633 samples, 99.55%)</title><rect x="0.1074%" y="501" width="99.5488%" height="15" fill="rgb(205,151,52)" fg:x="5" fg:w="4633"/><text x="0.3574%" y="511.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (4,633 samples, 99.55%)</title><rect x="0.1074%" y="485" width="99.5488%" height="15" fill="rgb(253,215,39)" fg:x="5" fg:w="4633"/><text x="0.3574%" y="495.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (4,633 samples, 99.55%)</title><rect x="0.1074%" y="469" width="99.5488%" height="15" fill="rgb(221,220,41)" fg:x="5" fg:w="4633"/><text x="0.3574%" y="479.50">core::ops::function::FnOnce::call_once</text></g><g><title>temp_test::main (4,633 samples, 99.55%)</title><rect x="0.1074%" y="453" width="99.5488%" height="15" fill="rgb(218,133,21)" fg:x="5" fg:w="4633"/><text x="0.3574%" y="463.50">temp_test::main</text></g><g><title>toyjs_vm::realm::exec::&lt;impl toyjs_vm::realm::Realm&gt;::execute (4,630 samples, 99.48%)</title><rect x="0.1719%" y="437" width="99.4843%" height="15" fill="rgb(221,193,43)" fg:x="8" fg:w="4630"/><text x="0.4219%" y="447.50">toyjs_vm::realm::exec::&lt;impl toyjs_vm::realm::Realm&gt;::execute</text></g><g><title>toyjs_vm::value::nan_tagged::Value::unsafe_cast_function (5 samples, 0.11%)</title><rect x="99.5488%" y="421" width="0.1074%" height="15" fill="rgb(240,128,52)" fg:x="4633" fg:w="5"/><text x="99.7988%" y="431.50"></text></g><g><title>toyjs_vm::gc::ptr::Gc&lt;T&gt;::from_raw (5 samples, 0.11%)</title><rect x="99.5488%" y="405" width="0.1074%" height="15" fill="rgb(253,114,12)" fg:x="4633" fg:w="5"/><text x="99.7988%" y="415.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (5 samples, 0.11%)</title><rect x="99.5488%" y="389" width="0.1074%" height="15" fill="rgb(215,223,47)" fg:x="4633" fg:w="5"/><text x="99.7988%" y="399.50"></text></g><g><title>__libc_start_main_alias_2 (4,634 samples, 99.57%)</title><rect x="0.1074%" y="693" width="99.5703%" height="15" fill="rgb(248,225,23)" fg:x="5" fg:w="4634"/><text x="0.3574%" y="703.50">__libc_start_main_alias_2</text></g><g><title>__libc_start_call_main (4,634 samples, 99.57%)</title><rect x="0.1074%" y="677" width="99.5703%" height="15" fill="rgb(250,108,0)" fg:x="5" fg:w="4634"/><text x="0.3574%" y="687.50">__libc_start_call_main</text></g><g><title>main (4,634 samples, 99.57%)</title><rect x="0.1074%" y="661" width="99.5703%" height="15" fill="rgb(228,208,7)" fg:x="5" fg:w="4634"/><text x="0.3574%" y="671.50">main</text></g><g><title>std::rt::lang_start_internal (4,634 samples, 99.57%)</title><rect x="0.1074%" y="645" width="99.5703%" height="15" fill="rgb(244,45,10)" fg:x="5" fg:w="4634"/><text x="0.3574%" y="655.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (4,634 samples, 99.57%)</title><rect x="0.1074%" y="629" width="99.5703%" height="15" fill="rgb(207,125,25)" fg:x="5" fg:w="4634"/><text x="0.3574%" y="639.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (4,634 samples, 99.57%)</title><rect x="0.1074%" y="613" width="99.5703%" height="15" fill="rgb(210,195,18)" fg:x="5" fg:w="4634"/><text x="0.3574%" y="623.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (4,634 samples, 99.57%)</title><rect x="0.1074%" y="597" width="99.5703%" height="15" fill="rgb(249,80,12)" fg:x="5" fg:w="4634"/><text x="0.3574%" y="607.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (4,634 samples, 99.57%)</title><rect x="0.1074%" y="581" width="99.5703%" height="15" fill="rgb(221,65,9)" fg:x="5" fg:w="4634"/><text x="0.3574%" y="591.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::rt::init (1 samples, 0.02%)</title><rect x="99.6562%" y="565" width="0.0215%" height="15" fill="rgb(235,49,36)" fg:x="4638" fg:w="1"/><text x="99.9062%" y="575.50"></text></g><g><title>std::sys::unix::init (1 samples, 0.02%)</title><rect x="99.6562%" y="549" width="0.0215%" height="15" fill="rgb(225,32,20)" fg:x="4638" fg:w="1"/><text x="99.9062%" y="559.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::init (1 samples, 0.02%)</title><rect x="99.6562%" y="533" width="0.0215%" height="15" fill="rgb(215,141,46)" fg:x="4638" fg:w="1"/><text x="99.9062%" y="543.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (1 samples, 0.02%)</title><rect x="99.6562%" y="517" width="0.0215%" height="15" fill="rgb(250,160,47)" fg:x="4638" fg:w="1"/><text x="99.9062%" y="527.50"></text></g><g><title>__GI___sigaltstack (1 samples, 0.02%)</title><rect x="99.6562%" y="501" width="0.0215%" height="15" fill="rgb(216,222,40)" fg:x="4638" fg:w="1"/><text x="99.9062%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.6562%" y="485" width="0.0215%" height="15" fill="rgb(234,217,39)" fg:x="4638" fg:w="1"/><text x="99.9062%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.6562%" y="469" width="0.0215%" height="15" fill="rgb(207,178,40)" fg:x="4638" fg:w="1"/><text x="99.9062%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.6562%" y="453" width="0.0215%" height="15" fill="rgb(221,136,13)" fg:x="4638" fg:w="1"/><text x="99.9062%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.6562%" y="437" width="0.0215%" height="15" fill="rgb(249,199,10)" fg:x="4638" fg:w="1"/><text x="99.9062%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.6562%" y="421" width="0.0215%" height="15" fill="rgb(249,222,13)" fg:x="4638" fg:w="1"/><text x="99.9062%" y="431.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="99.7636%" y="677" width="0.0430%" height="15" fill="rgb(244,185,38)" fg:x="4643" fg:w="2"/><text x="100.0136%" y="687.50"></text></g><g><title>__rtld_malloc_init_stubs (1 samples, 0.02%)</title><rect x="99.8066%" y="677" width="0.0215%" height="15" fill="rgb(236,202,9)" fg:x="4645" fg:w="1"/><text x="100.0566%" y="687.50"></text></g><g><title>__GI___tunables_init (1 samples, 0.02%)</title><rect x="99.8281%" y="661" width="0.0215%" height="15" fill="rgb(250,229,37)" fg:x="4646" fg:w="1"/><text x="100.0781%" y="671.50"></text></g><g><title>_dl_map_object_deps (1 samples, 0.02%)</title><rect x="99.8711%" y="645" width="0.0215%" height="15" fill="rgb(206,174,23)" fg:x="4648" fg:w="1"/><text x="100.1211%" y="655.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.02%)</title><rect x="99.8711%" y="629" width="0.0215%" height="15" fill="rgb(211,33,43)" fg:x="4648" fg:w="1"/><text x="100.1211%" y="639.50"></text></g><g><title>openaux (1 samples, 0.02%)</title><rect x="99.8711%" y="613" width="0.0215%" height="15" fill="rgb(245,58,50)" fg:x="4648" fg:w="1"/><text x="100.1211%" y="623.50"></text></g><g><title>_dl_map_object (1 samples, 0.02%)</title><rect x="99.8711%" y="597" width="0.0215%" height="15" fill="rgb(244,68,36)" fg:x="4648" fg:w="1"/><text x="100.1211%" y="607.50"></text></g><g><title>_dl_map_object_from_fd (1 samples, 0.02%)</title><rect x="99.8711%" y="581" width="0.0215%" height="15" fill="rgb(232,229,15)" fg:x="4648" fg:w="1"/><text x="100.1211%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.8711%" y="565" width="0.0215%" height="15" fill="rgb(254,30,23)" fg:x="4648" fg:w="1"/><text x="100.1211%" y="575.50"></text></g><g><title>dl_main (6 samples, 0.13%)</title><rect x="99.8496%" y="661" width="0.1289%" height="15" fill="rgb(235,160,14)" fg:x="4647" fg:w="6"/><text x="100.0996%" y="671.50"></text></g><g><title>_dl_relocate_object (4 samples, 0.09%)</title><rect x="99.8926%" y="645" width="0.0859%" height="15" fill="rgb(212,155,44)" fg:x="4649" fg:w="4"/><text x="100.1426%" y="655.50"></text></g><g><title>_dl_lookup_symbol_x (3 samples, 0.06%)</title><rect x="99.9141%" y="629" width="0.0645%" height="15" fill="rgb(226,2,50)" fg:x="4650" fg:w="3"/><text x="100.1641%" y="639.50"></text></g><g><title>do_lookup_x (2 samples, 0.04%)</title><rect x="99.9355%" y="613" width="0.0430%" height="15" fill="rgb(234,177,6)" fg:x="4651" fg:w="2"/><text x="100.1855%" y="623.50"></text></g><g><title>check_match (2 samples, 0.04%)</title><rect x="99.9355%" y="597" width="0.0430%" height="15" fill="rgb(217,24,9)" fg:x="4651" fg:w="2"/><text x="100.1855%" y="607.50"></text></g><g><title>strcmp (2 samples, 0.04%)</title><rect x="99.9355%" y="581" width="0.0430%" height="15" fill="rgb(220,13,46)" fg:x="4651" fg:w="2"/><text x="100.1855%" y="591.50"></text></g><g><title>all (4,654 samples, 100%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(239,221,27)" fg:x="0" fg:w="4654"/><text x="0.2500%" y="751.50"></text></g><g><title>temp_test (4,654 samples, 100.00%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(222,198,25)" fg:x="0" fg:w="4654"/><text x="0.2500%" y="735.50">temp_test</text></g><g><title>_start (4,652 samples, 99.96%)</title><rect x="0.0430%" y="709" width="99.9570%" height="15" fill="rgb(211,99,13)" fg:x="2" fg:w="4652"/><text x="0.2930%" y="719.50">_start</text></g><g><title>_dl_start (15 samples, 0.32%)</title><rect x="99.6777%" y="693" width="0.3223%" height="15" fill="rgb(232,111,31)" fg:x="4639" fg:w="15"/><text x="99.9277%" y="703.50"></text></g><g><title>_dl_sysdep_start (8 samples, 0.17%)</title><rect x="99.8281%" y="677" width="0.1719%" height="15" fill="rgb(245,82,37)" fg:x="4646" fg:w="8"/><text x="100.0781%" y="687.50"></text></g><g><title>init_cpu_features.constprop.0 (1 samples, 0.02%)</title><rect x="99.9785%" y="661" width="0.0215%" height="15" fill="rgb(227,149,46)" fg:x="4653" fg:w="1"/><text x="100.2285%" y="671.50"></text></g><g><title>get_common_indices.constprop.0 (1 samples, 0.02%)</title><rect x="99.9785%" y="645" width="0.0215%" height="15" fill="rgb(218,36,50)" fg:x="4653" fg:w="1"/><text x="100.2285%" y="655.50"></text></g></svg></svg>